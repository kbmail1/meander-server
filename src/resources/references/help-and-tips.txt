pureComponent

***

ControlledForm Inputs

***


Derived State
It isn't an anti-pattern to initialize state from props if it's understood that the state doesn't rely on the props after the initialization. If you are trying to keep the two in sync, that's an anti-pattern.
--------------------------------------------------


'props.children => children is a special prop in rhe props received a component:
Some components don’t know their children ahead of time. This is especially common for components like Sidebar or Dialog that represent generic “boxes”.

We recommend that such components use the special children prop to pass children elements directly into their output:


--------------------------------------------------

ACCESSIBILITY

Reach-Router
React-router

Explore React Live, react-Axe, Yup and other packages
Package - reach-ui comes with full A11y support out of the box
- Accordion
- Dialog
- Tabs
- Tooltips


Semantic UI - React - https:// react.semantic-ui.com

ReactX package, Axe Vs Axe browsser extension - similar support.  its component level Vs. Page level.


Use Role-Alert and Role-Status t0 create Live-Regions


----------------------------------------------------

Downship Package ????

------------------------------------------------
CSS
navigation bars - look at fixed, sticky, top, bottom.
resize=none property => disables the grabber used to change size.
tickmark character - Symbol	✓
Name	check mark
Unicode number	U+2713
Category
Check marks
Encoding
HTML Entity	&#10003;
HTML Entity (hex)	&#x2713;

------------------------------------------------
Flexbox - align - content vs items:
From the example at flexboxfroggy.com:

align-content determines the spacing between lines

align-items determines how the items as a whole are aligned within the
container.

When there is only one line, align-content has no effect

following 'viewport' meta-tag makes difference to the layouts
<header>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
</header>

------------------------------------------------

Some Javascript

Note: It is not enough to check whether a property is undefined.
The property might very well exist, but its value just happens
to be set to undefined
Hence, use hasOwnProperty()

Array: some useful methods
- every()
- copyWithin()
- fill()


----------------------------------------------------

Node JS Promises - on failure default action by node is to console.log
Instead register the global handler for it:

One case of special usefulness: when writing code for Node.js, it's common that modules you include in your project may have unhandled rejected promises, logged to the console by the Node.js runtime. You can capture them for analysis and handling by your code—or just to avoid having them cluttering up your output—by adding a handler for the Node.js unhandledRejection event (notice the difference in capitalization of the name), like this:

process.on("unhandledRejection", (reason, promise) => {
  /* You might start here by adding code to examine the
   * "promise" and "reason" values. */
});
Copy to Clipboard
For Node.js, to prevent the error from being logged to the console (the default action that would otherwise occur), adding that process.on() listener is all that’s necessary; there's no need for an equivalent of the browser runtime’s preventDefault() method.

However, if you add that process.on listener but don't also have code within it to handle rejected promises, they will just be dropped on the floor and silently ignored. So ideally, you should add code within that listener to examine each rejected promise and make sure it was not caused by an actual code bug.

---------------------------------------------------------

// CSS prop to acommodate padding/margin/border-width etc
   in the 'width' of the object.
box-sizing: border-box;


---------------------------------------------------------
GQL
	Basic Types
- 	String, Int, Float, Boolean, and ID

	Purpose of '!'
		Use an exclamation point to indicate a type cannot be nullable,
		so String! is a non-nullable string.

- Declaring compound types
  . arrays should be declared [String].. not String[], like typescript.
  . Note .. String, not string.
  . new compound types can use basic types or other compound types or
    their arrays

Once the Apollo Server is listening, the playground is
 automatically available at http://host:port/graphql...